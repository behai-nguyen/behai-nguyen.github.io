---
layout: post
title: "Python FastAPI: OAuth2 Scopes Part 02 - UI Elements and User-Assigned Scopes"

description: In the previous post, we implemented OAuth2 scopes for endpoint handler methods. This post extends that implementation to include UI elements — components that send HTTP requests to the server application. 

custom-css-list:
    - "https://cdn.jsdelivr.net/npm/uikit@3.14.1/dist/css/uikit.min.css"

custom-javascript-list:
    - "https://cdn.jsdelivr.net/npm/uikit@3.14.1/dist/js/uikit.min.js"
    - "https://cdn.jsdelivr.net/npm/uikit@3.14.1/dist/js/uikit-icons.min.js"

gallery-image-list:
    - "https://behainguyen.wordpress.com/wp-content/uploads/2024/10/123-01.png"
    - "https://behainguyen.wordpress.com/wp-content/uploads/2024/10/123-02.png"

tags:
- Python
- FastAPI
- OAuth2
- Scope
- JSON Web Token
- JWT
- UI
---

<em>
In the <a href="https://behainguyen.wordpress.com/2024/10/08/python-fastapi-implementing-oauth2-scopes-part-01/" title="Python FastAPI: Implementing OAuth2 Scopes Part 01" target="_blank">previous post</a>, we implemented <a href="https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/" title="OAuth2 scopes" target="_blank">OAuth2 scopes</a> for endpoint handler methods. This post extends that implementation to include <strong>UI elements</strong> — components that send HTTP requests to the server application.
</em>

<h3>
🐍 <a href="https://github.com/behai-nguyen/fastapi_learning" title="Index of the Complete Series" target="_blank">Index of the Complete Series</a>.
</h3>

| ![123-feature-image.png](https://behainguyen.wordpress.com/wp-content/uploads/2024/10/123-feature-image.png) |
|:--:|
| *Python FastAPI: OAuth2 Scopes Part 02 - UI Elements and User-Assigned Scopes* |

The code requires Python 3.12.4. Please refer to the <a href="https://github.com/behai-nguyen/fastapi_learning#the-code-after-tag-v040-requires-python-3124" title="The Code After Tag v0.4.0 Requires Python 3.12.4" target="_blank">following discussion</a> on how to upgrade to Python 3.12.4.

🚀 <strong>Please note,</strong> complete code for this post can be downloaded from GitHub with:

```
git clone -b v0.11.0 https://github.com/behai-nguyen/fastapi_learning.git
```

<a id="the-objective"></a>
❶ At <a href="https://behainguyen.wordpress.com/2024/10/08/python-fastapi-implementing-oauth2-scopes-part-01/#concluding-remarks" title="Python FastAPI: Implementing OAuth2 Scopes Part 01" target="_blank">the conclusion</a> of the previous post, we stated:

> Next, I would like to have an option to display or hide UI elements based on users’ scope availability. For example, for a user such as <code>moss.shanbhogue.10045@gmail.com</code>, who has no scope, the application should be able to decide whether or not to display the <code>My Info</code> and <code>My Info as JSON</code> buttons, since the underlying endpoint handler method rejects the requests anyway.

👉 In this post, we will implement this proposal. Instead of hiding or displaying UI elements, we will enable or disable them. This approach helps users visualise the entire application's functionalities and understand what access privileges they have and do not have.

<a id="project-layout"></a>
❷ Only a single integration test module has been added. The full updated structure of the project is outlined below.

<strong>-- Please note,</strong> those marked with <span style="font-size:1.5em;">★</span> are updated, and those marked with <span style="font-size:1.5em;">☆</span> are new.

```
/home/behai/fastapi_learning/
.
├── cert
│   ├── cert.pem
│   └── key.pem
├── .env ★
├── logger_config.yaml
├── main.py
├── pyproject.toml
├── pytest.ini ★
├── README.md ★
├── src
│   └── fastapi_learning
│       ├── businesses
│       │   ├── app_business.py
│       │   ├── base_business.py
│       │   ├── base_validation.py
│       │   ├── employees_mgr.py
│       │   └── employees_validation.py
│       ├── common
│       │   ├── consts.py
│       │   ├── jwt_utils.py
│       │   ├── queue_logging.py
│       │   └── scope_utils.py
│       ├── controllers
│       │   ├── admin.py ★
│       │   ├── auth.py ★
│       │   └── __init__.py ★
│       ├── __init__.py
│       ├── models
│       │   └── employees.py
│       ├── static
│       │   └── styles.css
│       └── templates
│           ├── admin
│           │   └── me.html
│           ├── auth
│           │   ├── home.html ★
│           │   └── login.html
│           └── base.html
└── tests
    ├── business
    │   ├── test_employees_mgr.py
    │   └── test_scope_utils.py
    ├── conftest.py
    ├── __init__.py
    ├── integration
    │   ├── test_admin_itgt.py
    │   ├── test_api_itgt.py
    │   ├── test_auth_itgt.py
    │   ├── test_expired_jwt.py
    │   ├── test_scope_permission_itgt.py
    │   └── test_scope_ui_itgt.py ☆
    ├── README.md
    └── unit
        └── test_employees.py
```

<a id="code-refactorings"></a>
❸ In this section, we discuss the code changes, which are fairly straighforward.

<a id="code-refactoring-env"></a>
⓵ For simplicity, the option to enable or disable UI elements is set in the environment <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/.env#L1-L4" title="The environment file .env" target="_blank"><code>.env</code> file</a>:

<figure class="highlight"><pre><code class="language-cfg" data-lang="cfg"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre># Display UI elements which send requests to the server even though
# the logged in user does not have sufficient scopes to run the 
# endpoint handler methods.
ENABLE_NO_SCOPES_UI = True
</pre></td></tr></tbody></table></code></pre></figure>

That means:

<ol>
<li style="margin-top:10px;">
When <code>ENABLE_NO_SCOPES_UI</code> is <code>True</code>, UI elements are enabled even though the logged-in user has no appropriate scopes.
</li>

<li style="margin-top:10px;">
When <code>ENABLE_NO_SCOPES_UI</code> is <code>False</code>, UI elements are disabled when the logged-in user has no appropriate scopes.
</li>
</ol>

<a id="code-refactoring-controllers-init"></a>
⓶ Next, in the <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/__init__.py" title="The controllers/__init__.py module" target="_blank"><code>controllers/__init__.py</code></a> module, we add some template methods and generic helper methods.

<a id="code-refactoring-controllers-init-template-methods"></a>
● The two template methods are <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/__init__.py#L44-L55" title="def enable_no_scopes_ui() -&gt; bool:" target="_blank"><code>enable_no_scopes_ui()</code></a> and <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/__init__.py#L57-L63" title="def has_required_scopes(required_scopes: list, assigned_scopes: list) -&gt; bool:" target="_blank"><code>has_required_scopes(...)</code></a>. They are basically one-liner methods, and they are made available to templates as, and they are made available to templates as:

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">69
70
</pre></td><td class="code"><pre><span class="n">templates</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="nb">globals</span><span class="p">[</span><span class="s">'enable_no_scopes_ui'</span><span class="p">]</span> <span class="o">=</span> <span class="n">enable_no_scopes_ui</span>
<span class="n">templates</span><span class="p">.</span><span class="n">env</span><span class="p">.</span><span class="nb">globals</span><span class="p">[</span><span class="s">'has_required_scopes'</span><span class="p">]</span> <span class="o">=</span> <span class="n">has_required_scopes</span>
</pre></td></tr></tbody></table></code></pre></figure>

<a id="code-refactoring-controllers-init-helper-methods"></a>
● The two helper methods are <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/__init__.py#L72-L78" title="def credentials_exception(detail: str=NOT_AUTHENTICATED_MSG, authenticate_value: str=&quot;Bearer&quot;) -&gt; HTTPException:" target="_blank"><code>credentials_exception(...)</code></a> and <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/__init__.py#L80-L90" title="def attempt_decoding_access_token(token: str) -&gt; Union[TokenData, HTTPException]:" target="_blank"><code>attempt_decoding_access_token(...)</code></a>. They are refactored from other <a href="https://github.com/behai-nguyen/fastapi_learning/tree/09f7ef07a9f4332eef0e221b550c7dc826a0ea25/src/fastapi_learning/controllers" title="The controllers layer" target="_blank"><code>controllers</code></a>'s modules. They are also short and should be self-explanatory.

<a id="code-refactoring-objective"></a>
⓷ Next, the core objective of this post is to optionally disable or enable UI elements based on the logged-in users' assigned scopes. Presently, there are only two UI elements across the entire application UI, both located on the home page, which is delivered right after a successful login. Therefore, we will discuss the <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/auth.py" title="The controllers/auth.py module" target="_blank"><code>controllers/auth.py</code></a> module and <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/templates/auth/home.html" title="The home page template" target="_blank"><code>auth/home.html</code></a> together.

<a id="code-refactoring-objective-auth-module"></a>
● There are two changes in the <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/auth.py" title="The controllers/auth.py module" target="_blank"><code>controllers/auth.py</code></a> module:

<span style="font-size:1.5em;font-weight:bold;">⑴</span> In the <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/auth.py#L112-L119" title="async def home_page(request: Request, token: Annotated[str, Depends(oauth2_scheme)]) -&gt; HTMLResponse:" target="_blank"><code>home_page(...)</code></a> method: Since we need the logged-in user scopes to decide on the state of the UI elements, we add a new parameter <code>token: Annotated[str, Depends(oauth2_scheme)]</code> to this method. This new parameter is then passed to <code>__home_page(request=request, token=token)</code>.

<span style="font-size:1.5em;font-weight:bold;">⑵</span> In the <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/auth.py#L87-L102" title="def __home_page(request: Request, token: Annotated[str, Depends(oauth2_scheme)]) -&gt; HTMLResponse:" target="_blank"><code>__home_page(...)</code></a> helper method: We also add a new parameter <code>token: Annotated[str, Depends(oauth2_scheme)]</code>. Inside the method, we decode the token to get the logged-in user scopes. The decoding can either succeed or fail; in both cases, we pass the appropriate decoding result to the home template.

<a id="code-refactoring-objective-home-page"></a>
● Important changes take place in the <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/templates/auth/home.html" title="The home page template" target="_blank"><code>auth/home.html</code></a> template:

<span style="font-size:1.5em;font-weight:bold;">⑴</span> <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/templates/auth/home.html#L7-L21" title="The home page template handles access token decoding error" target="_blank">Handling access token decoding errors</a>:

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>{&#37; if data.status_code is defined and data.detail is defined &#37;}

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h2&gt;</span>It's on me... Please contact support, quoting the below message:<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">"text-danger fw-bold"</span><span class="nt">&gt;&lt;/h2&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

{&#37; else &#37;}
</pre></td></tr></tbody></table></code></pre></figure>

If the data passed over is an <code>HTTPException</code>, we just display the exception detail and nothing else.

<span style="font-size:1.5em;font-weight:bold;">⑵</span> <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/templates/auth/home.html#L48-L55" title="UI elements state" target="_blank">Preparing UI elements state</a>:

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre>{&#37; set required_scopes = ['user:read'] &#37;}

{&#37; set disabled_str = '' &#37;}
{&#37; if not enable_no_scopes_ui() &#37;}
{&#37;     if not has_required_scopes(required_scopes, data['user_scopes']) &#37;}
{&#37;         set disabled_str = 'disabled' &#37;}
{&#37;     endif &#37;}
{&#37; endif &#37;}
</pre></td></tr></tbody></table></code></pre></figure>

This page is simple — the only scope required is <code>user:read</code>. 💥 Other (future) pages might not be this simple; there could be multiple UI elements requiring different scopes. Only when <code>ENABLE_NO_SCOPES_UI</code> is <code>False</code>, we work out if UI elements need to be disabled.

<span style="font-size:1.5em;font-weight:bold;">⑶</span> Finally, we apply the UI elements state:

```html
<button type="button" id="meBtn" class="btn btn-link" {{disabled_str}}>My Info as JSON</button>
<button type="submit" class="btn btn-primary" {{disabled_str}}>My Info</button>
```

<a id="code-refactoring-objective"></a>
⓸ The single change in the <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/admin.py" title="The controllers/admin.py module" target="_blank"><code>controllers/admin.py</code></a> module does not involve a logic change. In the <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/src/fastapi_learning/controllers/admin.py#L57-L86" title="async def get_current_user(security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]):" target="_blank"><code>get_current_user(...)</code></a> method, we refactor some code into the <a href="#code-refactoring-controllers-init-helper-methods">two helper methods</a>, and <code>get_current_user(...)</code> now calls these instead.

<a id="code-refactoring-tests"></a>
❹ We did not have to make any changes to the existing tests. They should all pass. The new test module we have implemented to test the new UI elements feature is <a href="https://github.com/behai-nguyen/fastapi_learning/blob/7f7fc6e5e39d595e94f35d26105226365165d3fc/tests/integration/test_scope_ui_itgt.py" title="The tests/integration/test_scope_ui_itgt.py module" target="_blank"><code>test_scope_ui_itgt.py</code></a>. There are only two tests in this new integration test module. Both tests use the user <code>moss.shanbhogue.10045@gmail.com</code>. 🚀 Please refer to the discussion on <a href="https://behainguyen.wordpress.com/2024/10/08/python-fastapi-implementing-oauth2-scopes-part-01/#impl-refactoring-emp-mgr-mock-user-list" title="The mock user list" target="_blank">test users</a> in the previous post.

<a id="ui-testing"></a>
❺ Let’s check the application UI elements state for the user <code>moss.shanbhogue.10045@gmail.com</code>/<code>password</code>. In the screenshots below, the first shows <code>ENABLE_NO_SCOPES_UI</code> set to <code>False</code>, meaning UI elements are disabled when the logged-in user has no appropriate scopes:

{% include image-gallery.html list=page.gallery-image-list %}
<br/>

The second screenshot shows that <code>My Info</code> and <code>My Info as JSON</code> are disabled as expected.

<a id="impl-disadvantages"></a>
❻ The obvious disadvantage of this implementation is that we must keep the required scopes lists in sync for both the endpoint handler methods and the template UI elements that send HTTP requests to these methods. If the scope requirements change, we must hunt down and update all occurrences. Considering that, within a page, UI elements access different endpoints — each requiring a different scope — keeping them in sync could be problematic. For now, we will ignore this issue, but as the application grows, it will need to be addressed. Please keep in mind that this is only a proof of concept implementation.

<a id="concluding-remarks"></a>
❼ I would like to keep this post short. We have implemented what we set out to do. However, this new feature is not widely applied across the application since it currently lacks extensive functionalities. In the next posts, we will add more functionalities to the application and assess how well we have implemented this feature.

Thank you for reading. I hope you find the information in this post useful. Stay safe, as always.

✿✿✿

Feature image source:

<ul>
<li>
<a href="https://www.omgubuntu.co.uk/2022/09/ubuntu-2210-kinetic-kudu-default-wallpaper" target="_blank">https://www.omgubuntu.co.uk/2022/09/ubuntu-2210-kinetic-kudu-default-wallpaper</a>
</li>
<li>
<a href="https://in.pinterest.com/pin/337277459600111737/" target="_blank">https://in.pinterest.com/pin/337277459600111737/</a>
</li>
<li>
<a href="https://www.python.org/downloads/release/python-3124/" target="_blank">https://www.python.org/downloads/release/python-3124/</a>
</li>
<li>
<a href="https://fastapi.tiangolo.com/" target="_blank">https://fastapi.tiangolo.com/</a>
</li>
<li>
<a href="https://1000logos.net/download-image/" target="_blank">https://1000logos.net/download-image/</a>
</li>
<li>
<a href="https://www.logo.wine/logo/MySQL" target="_blank">https://www.logo.wine/logo/MySQL</a>
</li>
<li>
<a href="https://icon-icons.com/download/170836/PNG/512/" target="_blank">https://icon-icons.com/download/170836/PNG/512/</a>
</li>
<li>
<a href="https://www.stickpng.com/img/icons-logos-emojis/tech-companies/mariadb-full-logo" target="_blank">https://www.stickpng.com/img/icons-logos-emojis/tech-companies/mariadb-full-logo</a>
</li>
</ul>

<h3>
🐍 <a href="https://github.com/behai-nguyen/fastapi_learning" title="Index of the Complete Series" target="_blank">Index of the Complete Series</a>.
</h3>
